/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ernda-si <ernda-si@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/17 14:59:29 by ernda-si          #+#    #+#             */
/*   Updated: 2024/06/17 17:18:30 by ernda-si         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

#include <fcntl.h>

int	ft_line_join(char *xdestination, char *xbuff, int bsize)
{
	int	i;

	i = 0;
	while (xbuff[i] != '\0' || xbuff[i] != '\n' || i < bsize)
	{
		xdestination[i] = xbuff[i];
		i++;
	}
	return (i);
}

char	*get_next_line(int fd)
{
	static char	buff[BUFFER_SIZE + 1];
	char		*destination;
	int			bposition;
	int			bytes;

	bposition = 0;
	destination = (char *)malloc (sizeof(char) * (BUFFER_SIZE + 1));
	if (!destination)
		return (NULL);
	if (buff[0] == '\0')
	{
		bytes = read(fd, buff, BUFFER_SIZE + 0);
		if (bytes <= 0)
			{
				free(destination);
				return (NULL);
			}
		buff[bytes] = '\0';
	}
	if (buff[0] != '\0')
	{
		while (buff[bposition] != '\n' || buff[bposition] != '\0')
			bposition += ft_line_join(destination, buff, BUFFER_SIZE + 0);
		return(destination);
	}
	return (destination);
}

int	main(void)
{
	int	fd;
	int	i;
	
	i = 0;
	fd = open ("test.txt", O_RDONLY);
	while (i++ < 1)
		printf("%s\n", get_next_line(fd));
	printf("\n%d\n", fd);
	close(fd);
}

/*
	1- cria um buffer com buffer_size para definir tamanho de quantos caracteres seram passados a cada copia feita na funcao aux;
	2- read para passar conteudo do fd para o buffer;
	3- parsing ate a newline ou nulo do buffer para a dest, considerando que o limitador da newline vai estar tanto na funcao quanto na main, /
	e o buffersize vai estar na funcao, e no caso da main vai estar no read que ja faz o trabalho de parsing para o buffer;
	4- retornar a dest ate a proxima newline post parsing;
*/